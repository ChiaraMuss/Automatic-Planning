(define (domain healthcare3)

  ;; Requirements
  (:requirements :strips :typing :negative-preconditions :equality :hierarchy)

  ;; Types
  (:types
    location inventory - object
    medical_unit - location
    content - object
    scissor band_aid syringes scalpel tongue_depressor aspirin - content
    robot - object
    terrestrial_robot aerial_robot - robot
    delivery_robot accompany_robot - terrestrial_robot
    drone - aerial_robot
    box - object
    carrier - object
    patient - object
    capacity-number - object
  )

  ;; Predicates
  (:predicates
    (robot_at ?r - robot ?l - location)
    (contains ?b - box ?c - content)
    (carrier_load ?c - carrier ?b - box)
    (carrier_at ?c - carrier ?l - location)
    (robot_has_carrier ?r - robot ?c - carrier)
    (connected ?l1 - location ?l2 - location)
    (at_box ?b - box ?l - location)
    (free_to_accompany ?r - accompany_robot)
    (accompanying_pat ?p - patient ?ar - accompany_robot)
    (patient_at ?p - patient ?l - location)
    (empty ?b - box)
    (full ?b - box)
    (loaded ?r - robot ?b - box)
    (free ?r - robot)
    (capacity ?c - carrier ?cap - capacity-number)
    (capacity-predecessor ?s1 - capacity-number ?s2 - capacity-number)
    (has_capacity ?c - carrier ?cap - capacity-number)
    (has_patient_capacity ?ar - accompany_robot ?cap - capacity-number)
  )

  ;; **TASKS**
  (:task deliver-supply 
    :parameters (?s - content ?m - medical_unit ?b - box ?r - robot ?from - location ?c - carrier ?cap - capacity-number ?new_cap - capacity-number)
    :precondition ()
    :effect (and (loaded ?r ?b) (robot_at ?r ?m))
  )

  (:task deliver-patient 
    :parameters (?ar - accompany_robot ?m - medical_unit ?p - patient)
    :precondition ()
    :effect (and (accompanying_pat ?p ?ar) (robot_at ?ar ?m))
  )

  ;; **METHODS**
  (:method m-deliver-supply-terrestrial
    :parameters (?r - terrestrial_robot ?b - box ?s - content ?from - location ?m - medical_unit ?c - carrier ?cap - capacity-number ?new_cap - capacity-number)
    :task (deliver-supply ?s ?m ?b ?r ?from ?c ?cap ?new_cap)
    :subtasks (and
      (task0 (load-box ?r ?b ?s ?from ?c ?cap ?new_cap))
      (task1 (move-terrestrial ?r ?from ?m))
      (task2 (unload-box ?r ?b ?s ?m))
    )
    :ordering (and
      (task0 < task1)
      (task1 < task2)
    )
  )

  (:method m-deliver-supply-aerial
    :parameters (?r - aerial_robot ?b - box ?s - content ?from - location ?m - medical_unit ?c - carrier ?cap - capacity-number ?new_cap - capacity-number)
    :task (deliver-supply ?s ?m ?b ?r ?from ?c ?cap ?new_cap)
    :subtasks (and
      (task0 (load-box ?r ?b ?s ?from ?c ?cap ?new_cap))
      (task1 (move-aerial ?r ?from ?m))
      (task2 (unload-box ?r ?b ?s ?m))
    )
    :ordering (and
      (task0 < task1)
      (task1 < task2)
    )
  )

  (:method m-deliver-patient
    :parameters (?ar - accompany_robot ?p - patient ?from - location ?m - medical_unit)
    :task (deliver-patient ?ar ?m ?p)
    :subtasks (and
      (task0 (pick-up-patient ?ar ?p ?from))
      (task1 (move-terrestrial ?ar ?from ?m))
      (task2 (drop-off-patient ?ar ?p ?m))
    )
    :ordering (and
      (task0 < task1)
      (task1 < task2)
    )
  )

  ;; **ACTIONS**
  (:action move-terrestrial
    :parameters (?r - terrestrial_robot ?from - location ?to - location)
    :precondition (and
      (robot_at ?r ?from)
      (connected ?from ?to)
      (free ?r))
    :effect (and
      (not (robot_at ?r ?from))
      (robot_at ?r ?to))
  )

  (:action move-aerial
    :parameters (?r - aerial_robot ?from - location ?to - location)
    :precondition (and
      (robot_at ?r ?from)
      (connected ?from ?to))
    :effect (and
      (not (robot_at ?r ?from))
      (robot_at ?r ?to))
  )

  (:action load-box
    :parameters (?r - robot ?b - box ?s - content ?l - location ?c - carrier ?cap - capacity-number ?new_cap - capacity-number)
    :precondition (and
      (robot_at ?r ?l)
      (at_box ?b ?l)
      (contains ?b ?s)
      (robot_has_carrier ?r ?c)
      (has_capacity ?c ?cap)
      (capacity-predecessor ?cap ?new_cap)
      (free ?r))
    :effect (and
      (carrier_load ?c ?b)
      (loaded ?r ?b)
      (full ?b)
      (not (has_capacity ?c ?cap))
      (has_capacity ?c ?new_cap)
      (not (free ?r)))
  )

  (:action unload-box
    :parameters (?r - robot ?b - box ?s - content ?l - location)
    :precondition (and
      (robot_at ?r ?l)
      (loaded ?r ?b)
      (full ?b))
    :effect (and
      (not (loaded ?r ?b))
      (not (full ?b))
      (empty ?b)
      (free ?r))
  )

  ;; Gestione del paziente
  (:action pick-up-patient
    :parameters (?ar - accompany_robot ?p - patient ?from - location)
    :precondition (and
      (robot_at ?ar ?from)
      (patient_at ?p ?from)
      (free_to_accompany ?ar))
    :effect (and
      (not (patient_at ?p ?from))
      (accompanying_pat ?p ?ar)
      (not (free_to_accompany ?ar)))
  )

  (:action drop-off-patient
    :parameters (?ar - accompany_robot ?p - patient ?m - medical_unit)
    :precondition (and
      (robot_at ?ar ?m)
      (accompanying_pat ?p ?ar))
    :effect (and
      (not (accompanying_pat ?p ?ar))
      (patient_at ?p ?m)
      (free_to_accompany ?ar))
  )

)

