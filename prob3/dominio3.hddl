(define (domain healthcare3)
  (:requirements :strips :typing :negative-preconditions :equality :hierarchy)

  (:types
    location - object
    medical_unit - location
    inventory - location
    supply - content
    scissor band_aid syringes - supply
    delivery_robot accompany_robot - robot
    carrier - box
    patient - object
  )

  (:predicates
    (robot_at ?r - robot ?l - location)
    (at_box ?b - box ?l - location)
    (robot_has_carrier ?r - delivery_robot ?c - carrier)
    (connected ?l1 - location ?l2 - location)
    (at_patient ?p - patient ?l - location)
    (contains ?b - box ?i - item)
    (empty ?b - box)
    (full ?b - box ?i - item)
    (free ?r - robot)
    (patient_needs_supply ?p - patient ?i - supply)
    (location_connected_to_med_unit ?l - location ?m - medical_unit)
    (location_connected_to_inventory ?l - location ?i - inventory)
  )

  ;; Tasks
  (:task deliver_supply
    :parameters (?p - patient ?s - supply)
    :precondition ()
    :effect ()
  )

  (:task prepare_box
    :parameters (?b - box ?r - robot ?i - item)
    :precondition ()
    :effect ()
  )

  (:task give_box
    :parameters (?r - robot ?b - box ?p - patient ?i - item)
    :precondition ()
    :effect ()
  )

  (:method m_deliver_supply_by_adding_to_carrier
    :parameters (?from ?to - location ?b - box ?p - patient ?s - supply ?r - robot ?c - carrier)
    :task (deliver_supply ?p ?s)
    :subtasks (and
      (task0 (prepare_box ?b ?r ?s))
      (task1 (move_with_box ?r ?from ?to ?b ?s ?c))
      (task2 (give_box ?r ?b ?p ?s))
    )
    :ordering (and
      (task0 < task1)
      (task1 < task2)
    )
  )

  ;; Action Definitions
  (:action prepare_box
    :parameters (?b - box ?r - robot ?i - item)
    :precondition (and
      (at_box ?b ?r)
      (not (full ?b ?i))
      (not (empty ?b))
      (contains ?b ?i)
    )
    :effect (and
      (full ?b ?i)
      (not (empty ?b))
    )
  )

  (:action move_with_box
    :parameters (?r - robot ?from - location ?to - location ?b - box ?i - item ?c - carrier)
    :precondition (and
      (robot_at ?r ?from)
      (at_box ?b ?from)
      (contains ?b ?i)
      (robot_has_carrier ?r ?c)
      (connected ?from ?to)
    )
    :effect (and
      (robot_at ?r ?to)
      (not (robot_at ?r ?from))
      (not (at_box ?b ?from))
      (at_box ?b ?to)
    )
  )

  (:action give_box
    :parameters (?r - robot ?b - box ?p - patient ?i - item)
    :precondition (and
      (robot_at ?r ?p)
      (at_box ?b ?p)
      (contains ?b ?i)
      (patient_needs_supply ?p ?i)
    )
    :effect (and
      (not (patient_needs_supply ?p ?i))
      (not (contains ?b ?i))
      (empty ?b)
    )
  )

  (:action load_to_robot_carrier
    :parameters (?r - robot ?b - box ?s - supply ?c - carrier)
    :precondition (and
      (robot_at ?r ?b)
      (contains ?b ?s)
      (not (robot_has_carrier ?r ?c))
      (free ?r)
    )
    :effect (and
      (robot_has_carrier ?r ?c)
      (not (free ?r))
    )
  )

  (:action unload_robot
    :parameters (?r - robot ?b - box ?s - supply ?c - carrier)
    :precondition (and
      (robot_at ?r ?b)
      (robot_has_carrier ?r ?c)
      (contains ?b ?s)
    )
    :effect (and
      (not (robot_has_carrier ?r ?c))
      (free ?r)
      (empty ?b)
    )
  )

  ;; Action for connecting locations
  (:action connect_locations
    :parameters (?l1 - location ?l2 - location)
    :precondition (and
      (connected ?l1 ?l2)
    )
    :effect ()
  )

)

