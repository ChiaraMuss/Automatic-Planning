(define (domain healthcare3)

  (:requirements :strips :typing :negative-preconditions :equality :hierarchy)

  (:types
    location inventory - object
    medical_unit - location
    content - object
    scissor band_aid syringes - content
    robot - object
    terrestrial_robot aerial_robot - robot
    delivery_robot accompany_robot - terrestrial_robot
    drone - aerial_robot
    box carrier - object
    patient - object
  )

  (:predicates
    (robot_at ?r - robot ?l - location)
    (contains ?b - box ?c - content)
    (carrier_load ?c - carrier ?b - box)
    (carrier_at ?c - carrier ?l - location)
    (robot_has_carrier ?r - robot ?c - carrier)
    (connected ?l1 - location ?l2 - location)
    (has_drone_port ?l - location)
    (at_box ?b - box ?l - location)
    (free_to_accompany ?r - accompany_robot)
    (accompanying_pat ?p - patient ?ar - accompany_robot)
    (patient_at ?p - patient ?l - location)
  )

  ;; TASKS (definiti correttamente)
  (:task (move ?r - terrestrial_robot ?from - location ?to - location))
  (:task (load_to_robot_carrier ?r - delivery_robot ?b - box ?c - carrier ?l - inventory))
  (:task (unload_from_robot_carrier ?r - delivery_robot ?b - box ?c - carrier ?l - location))
  (:task (take_patient ?ar - accompany_robot ?w - location ?p - patient))
  (:task (deliver_patient ?ar - accompany_robot ?m - medical_unit ?p - patient))

  ;; METHODS
  (:method m_move_robot
    :parameters (?r - terrestrial_robot ?from - location ?to - location)
    :task (move ?r ?from ?to)
    :subtasks (and
      (execute_move ?r ?from ?to))
  )

  (:method m_take_patient
    :parameters (?ar - accompany_robot ?w - location ?p - patient)
    :task (take_patient ?ar ?w ?p)
    :subtasks (and
      (execute_take_patient ?ar ?w ?p))
  )

  (:method m_deliver_patient
    :parameters (?ar - accompany_robot ?m - medical_unit ?p - patient)
    :task (deliver_patient ?ar ?m ?p)
    :subtasks (and
      (execute_deliver_patient ?ar ?m ?p))
  )

  ;; ACTIONS
  (:action execute_move
    :parameters (?r - terrestrial_robot ?from - location ?to - location)
    :precondition (and (robot_at ?r ?from) (connected ?from ?to))
    :effect (and (not (robot_at ?r ?from)) (robot_at ?r ?to))
  )

  (:action execute_take_patient
    :parameters (?ar - accompany_robot ?w - location ?p - patient)
    :precondition (and (robot_at ?ar ?w) (free_to_accompany ?ar) (patient_at ?p ?w))
    :effect (and (not (patient_at ?p ?w)) (not (free_to_accompany ?ar)) (accompanying_pat ?p ?ar))
  )

  (:action execute_deliver_patient
    :parameters (?ar - accompany_robot ?m - medical_unit ?p - patient)
    :precondition (and (robot_at ?ar ?m) (accompanying_pat ?p ?ar))
    :effect (and (not (accompanying_pat ?p ?ar)) (free_to_accompany ?ar) (patient_at ?p ?m))
  )
)


