(define (problem healthcare-problem)
  (:domain healthcare3)
  (:objects
    central_warehouse heliport_alpha - inventory
    entrance sector_a sector_b sector_c cardiology - location
    scalpel tongue_depressor aspirin - content
    box1 box2 box3 box4 box5 box6 box7 box8 box9 box10 - box
    delivery_robot1 delivery_robot2 - delivery_robot
    accompany_robot1 - accompany_robot
    drone1 drone2 - drone
    carrier1 carrier2 carrier3 carrier4 - carrier
    rocco ciro - patient
    dentistry radiology neuro_surgery day_hospital - medical_unit
    capacity0 capacity1 capacity2 capacity3 capacity4 capacity5 capacity6 capacity7 - capacity-number
  )

  (:htn
  :tasks (and
    (deliver-supply scalpel cardiology box1 delivery_robot1 entrance carrier1)
  )



  (:init
    ;; Capacit√† e precedenze
    (has_capacity carrier1 capacity1)
    (has_capacity carrier2 capacity3)
    (has_capacity carrier3 capacity4)
    (has_capacity carrier4 capacity5)
    
    (capacity-predecessor capacity0 capacity1)
    (capacity-predecessor capacity1 capacity2)
    (capacity-predecessor capacity2 capacity3)
    (capacity-predecessor capacity3 capacity4)
    (capacity-predecessor capacity4 capacity5)
    (capacity-predecessor capacity5 capacity6)
    (capacity-predecessor capacity6 capacity7)

    ;; Connessioni tra le location
    (connected entrance sector_a) (connected sector_a entrance)
    (connected sector_a sector_b) (connected sector_b sector_a)
    (connected sector_b sector_c) (connected sector_c sector_b)
    (connected sector_c entrance) (connected entrance sector_c)
    (connected entrance cardiology) (connected cardiology entrance)
    (connected sector_c cardiology) (connected cardiology sector_c)

    ;; Stato delle scatole
    (at_box box1 entrance)
    (contains box1 scalpel)
    (full box1)

    ;; Stato iniziale dei robot
    (robot_at delivery_robot1 entrance)
    (robot_has_carrier delivery_robot1 carrier1)
    (carrier_at carrier1 entrance)
    (free delivery_robot1)
  )
)


