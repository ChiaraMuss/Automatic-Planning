(define (domain healthcare-htn)
  (:requirements :strips :typing :htn)

  (:types 
    location 
    medical_unit - location
    box 
    content 
    robot accompany_robot - robot
    carrier - box
    patient)

  (:predicates
    (robot_at ?r - robot ?l - location)
    (patient_at ?p - patient ?l - location)
    (has ?m - medical_unit ?c - content)
    (empty ?b - box)
    (contains ?b - box ?c - content)
    (robot_carries ?r - robot ?b - box)
    (accompanying ?r - accompany_robot ?p - patient)
    (connected ?l1 - location ?l2 - location)
    (at_box ?b - box ?l - location)
    (at_content ?c - content ?l - location)
    (at_location ?m - medical_unit ?l - location)
    (on_carrier ?r - robot ?b - box)
    (carrier_capacity ?r - robot ?cap - number)
    (carrier_full ?r - robot))

  ;; Actions (from Problem 2.1.2)
  (:action move
    :parameters (?r - robot ?from - location ?to - location)
    :precondition (and (robot_at ?r ?from) (connected ?from ?to))
    :effect (and (not (robot_at ?r ?from)) (robot_at ?r ?to)))

  (:action load_box
    :parameters (?r - robot ?b - box ?l - location)
    :precondition (and (robot_at ?r ?l) 
                       (at_box ?b ?l) 
                       (empty ?b) 
                       (not (on_carrier ?r ?b)) 
                       (not (carrier_full ?r)))
    :effect (and (not (empty ?b)) (on_carrier ?r ?b) (robot_carries ?r ?b)))

  (:action unload_box
    :parameters (?r - robot ?b - box ?l - location ?m - medical_unit ?c - content)
    :precondition (and (robot_at ?r ?l) (on_carrier ?r ?b) (at_location ?m ?l) (contains ?b ?c))
    :effect (and (not (on_carrier ?r ?b)) (at_box ?b ?l) (has ?m ?c)))

  (:action fill_box
    :parameters (?r - robot ?b - box ?c - content ?l - location)
    :precondition (and (robot_at ?r ?l) (empty ?b) (at_content ?c ?l))
    :effect (and (not (empty ?b)) (contains ?b ?c)))

  (:action empty_box
    :parameters (?r - robot ?b - box ?m - medical_unit ?l - location ?c - content)
    :precondition (and (robot_carries ?r ?b) (robot_at ?r ?l) (at_location ?m ?l) (contains ?b ?c))
    :effect (and (not (contains ?b ?c)) (has ?m ?c)))

  ;; High-level tasks
  (:task deliver_supplies
    :parameters (?r - robot ?m - medical_unit ?c - content ?b - box))

  (:task accompany_patients
    :parameters (?r - accompany_robot ?p - patient ?m - medical_unit))

  ;; Methods
  (:method deliver_supplies_method
    :parameters (?r - robot ?m - medical_unit ?c - content ?b - box)
    :task (deliver_supplies ?r ?m ?c ?b)
    :precondition (and (robot_at ?r ?l) (at_box ?b ?l))
    :subtasks (and
      (task0 (load_box ?r ?b ?l))
      (task1 (move ?r ?l ?destination))
      (task2 (unload_box ?r ?b ?destination ?m ?c)))
    :ordering (and
      (task0 < task1)
      (task1 < task2)))

  (:method accompany_patients_method
    :parameters (?r - accompany_robot ?p - patient ?m - medical_unit)
    :task (accompany_patients ?r ?p ?m)
    :precondition (and (robot_at ?r ?from) (patient_at ?p ?from) (at_location ?m ?to))
    :subtasks (and
      (task0 (move ?r ?from ?to))
      (task1 (accompany_patient ?r ?p ?from ?to ?m)))
    :ordering (and
      (task0 < task1)))
)

(define (problem healthcare-problem-htn)
  (:domain healthcare-htn)

  (:objects
    central_warehouse entrance location1 location2 - location
    scalpel tongue_depressor aspirin - content
    box1 box2 box3 - box
    robot1 robot2 - robot
    accompany_robot1 - accompany_robot
    patient1 patient2 - patient
    medical_unit1 medical_unit2 - medical_unit)

  (:init
    (robot_at robot1 central_warehouse)
    (robot_at robot2 entrance)
    (robot_at accompany_robot1 entrance)
    (patient_at patient1 entrance)
    (patient_at patient2 entrance)

    (at_box box1 central_warehouse)
    (at_box box2 central_warehouse)
    (at_box box3 central_warehouse)
    (at_content scalpel central_warehouse)
    (at_content tongue_depressor central_warehouse)
    (at_content aspirin central_warehouse)

    (carrier_capacity robot1 3)
    (carrier_capacity robot2 2)

    (connected central_warehouse entrance)
    (connected entrance location1)
    (connected location1 location2)

    (at_location medical_unit1 location1)
    (at_location medical_unit2 location2))

  (:htn
    :parameters ()
    :subtasks (and
      (task0 (deliver_supplies robot1 medical_unit1 scalpel box1))
      (task1 (accompany_patients accompany_robot1 patient1 medical_unit1))
      (task2 (deliver_supplies robot1 medical_unit2 aspirin box2))
      (task3 (accompany_patients accompany_robot1 patient2 medical_unit2)))
    :ordering (and
      (task0 < task1)
      (task1 < task2)
      (task2 < task3)))
)
