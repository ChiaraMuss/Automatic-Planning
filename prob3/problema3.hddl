(define (problem healthcare-problem-htn)
  (:domain healthcare-htn)

  (:objects
    central_warehouse entrance location1 location2 - location
    scalpel tongue_depressor aspirin - content
    box1 box2 box3 - box
    delivery_robot1 delivery_robot2 - delivery_robot
    accompany_robot1 - accompany_robot
    rocco ciro - patient
    medical_unit1 medical_unit2 - medical_unit
  )

  (:init
    ; Initial positions of robots and patients
    (robot_at delivery_robot1 central_warehouse)
    (robot_at delivery_robot2 central_warehouse)
    (robot_at accompany_robot1 entrance)
    (patient_at rocco entrance)
    (patient_at ciro entrance)
    
    ;; Accompanying robot status
    (free_to_accompany accompany_robot1)
    
    ; Initial positions of boxes
    (at_box box1 central_warehouse)
    (at_box box2 central_warehouse)
    (at_box box3 central_warehouse)

    ;; Box contents
    (contains box1 scalpel)
    (contains box2 tongue_depressor)
    (contains box3 aspirin)

    ; Location connections
    (connected central_warehouse location1)
    (connected location1 central_warehouse)
    (connected location1 location2)
    (connected location2 location1)

    (connected location1 medical_unit1)
    (connected medical_unit1 location1)

    (connected location2 medical_unit2)
    (connected medical_unit2 location2)
  )

  (:htn
    :tasks (and
      (task0 (deliver_supplies delivery_robot1 medical_unit1 scalpel box1))
      (task1 (transfer_patient accompany_robot1 rocco medical_unit1))
      (task2 (deliver_supplies delivery_robot2 medical_unit2 aspirin box2))
      (task3 (transfer_patient accompany_robot1 ciro medical_unit2))
    )
    :ordering (and
      (task0 < task1)
      (task1 < task2)
      (task2 < task3)
    )
  )
)
